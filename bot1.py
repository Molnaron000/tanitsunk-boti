# app.py ‚Äî Tan√≠tsunk Boti Router (Gemini + Custom GPT redirect)
# -----------------------------------------------------------------
# Funkci√≥k:
# 1) V√°laszt√≥ fel√ºlet k√°rty√°kkal + keres≈ëvel (kulcssz√≥‚Äërouter)
# 2) Egy kattint√°sos √°tir√°ny√≠t√°s a megfelel≈ë Custom GPT linkre (st.link_button)
# 3) Be√©p√≠tett chat Gemini alapon (ha nem akarsz kil√©pni a webappb√≥l)
# 4) "444" speci√°lis √ºzenet ‚Üí visszajelz√©si blokk
# 5) Opcion√°lis GCS‚Äëb≈ël PDF/Excel kontextus hozz√°ad√°sa a v√°laszokhoz
#
# Fut√°s helyben:
#   pip install -r requirements.txt
#   streamlit run app.py
#
# Sz√ºks√©ges secrets (Streamlit Cloud ‚Üí ‚öôÔ∏è ‚Üí Secrets):
#   GOOGLE_API_KEY = "..."
#   gcp_service_account_json = "{ ... }"   # opcion√°lis (GCS‚Äëhez)

import io
import os
import json
import textwrap
from pathlib import Path
from typing import Dict, List

import pandas as pd
import streamlit as st
import PyPDF2

from google.oauth2 import service_account
from google.cloud import storage
import google.generativeai as genai

# =============================
# 0) Alapbe√°ll√≠t√°sok √©s kulcsok
# =============================
GOOGLE_API_KEY = (
    st.secrets.get("GOOGLE_API_KEY")
    or os.getenv("GOOGLE_API_KEY")
)
if not GOOGLE_API_KEY:
    st.set_page_config(page_title="Tan√≠tsunk Boti ‚Äì Router", page_icon="ü§ñ")
    st.error("‚ùå A Google API kulcs (GOOGLE_API_KEY) hi√°nyzik a secrets‚Äëb≈ël vagy k√∂rnyezeti v√°ltoz√≥kb√≥l.")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)

# -----------------------------
# GCS hiteles√≠t√©s (opcion√°lis)
# -----------------------------
storage_client = None
try:
    if "gcp_service_account_json" in st.secrets:
        gcp_info = json.loads(st.secrets["gcp_service_account_json"])  # JSON string ‚Üí dict
        credentials = service_account.Credentials.from_service_account_info(gcp_info)
        storage_client = storage.Client(credentials=credentials)
        gcs_ok = True
    else:
        gcs_ok = False
except Exception as e:
    gcs_ok = False
    st.warning(f"‚ö†Ô∏è GCS hiteles√≠t√©s sikertelen: {e}")

# =============================
# 1) Profilok √©s router
# =============================
DEFAULT_PROFILES: List[Dict] = [
    {
        "key": "tanulas-korrepetalas",
        "name": "Tanul√°s √©s korrepet√°l√°s",
        "emoji": "üß†",
        "model": "gemini-2.0-flash",
        "system": "Bar√°ts√°gos, t√ºrelmes tan√°r 5‚Äì8. oszt√°lyosoknak. R√∂vid, √©rthet≈ë, l√©p√©senk√©nti magyar√°zat.",
        "deep_link": "https://chatgpt.com/g/g-6885df785c98819194485a11871dbe8b-nje-tm-tanulas-es-korrepetalas",
    },
    {
        "key": "jatek-programotletek",
        "name": "J√°t√©k- √©s program√∂tletek",
        "emoji": "üé≤",
        "model": "gemini-2.0-flash",
        "system": "Adj kreat√≠v k√∂z√∂ss√©gi √©s k√©zm≈±ves √∂tleteket; l√©p√©sek, anyaglista, tan√°ri tippek.",
        "deep_link": "https://chatgpt.com/g/g-6885e3861e4c8191955d8485116b0558-nje-tm-jatek-es-programotletek",
    },
    {
        "key": "sport",
        "name": "Sporttev√©kenys√©g",
        "emoji": "ü§∏‚Äç‚ôÄÔ∏è",
        "model": "gemini-2.0-flash",
        "system": "Mozg√°sos foglalkoz√°sok tervez√©se, bemeleg√≠t√©sek, koroszt√°lyhoz igaz√≠tott j√°t√©kok.",
        "deep_link": "https://chatgpt.com/g/g-6885e3e9a120819180f0be3f03d6dd81-nje-tm-sporttevekenyseg",
    },
    {
        "key": "kirandulas",
        "name": "Kir√°ndul√°s szervez√©s",
        "emoji": "üó∫Ô∏è",
        "model": "gemini-2.0-flash",
        "system": "Iskolai kir√°ndul√°sok tervez√©se: √∫tvonal, k√∂lts√©gek, enged√©lyek, checklistek.",
        "deep_link": "https://chatgpt.com/g/g-6885df758468819182df9a14d5fe500a-nje-tm-kirandulas-szervezes",
    },
    {
        "key": "tarsasjatek",
        "name": "T√°rsasj√°t√©k aj√°nl√°s √©s szab√°ly magyar√°z√°s",
        "emoji": "‚ôüÔ∏è",
        "model": "gemini-2.0-flash",
        "system": "V√°lassz koroszt√°lyhoz ill≈ë t√°rsasokat; szab√°lymagyar√°zat k√∂z√©rthet≈ëen.",
        "deep_link": "https://chatgpt.com/g/g-6885e2d6e690819199a217a81d0d0371-nje-tm-tarsasjatek-ajanlas-es-szabaly-magyaraza",
    },
    {
        "key": "film-ajanlo",
        "name": "Film-aj√°nl√°s",
        "emoji": "üé¨",
        "model": "gemini-2.0-flash",
        "system": "Adj 3 filmet koroszt√°ly szerint; indokl√°s 1‚Äì2 mondat; √©rz√©keny tartalom jelz√©se.",
        "deep_link": "https://chatgpt.com/g/g-6885e4ff59688191bfc7d3f041658a4a-nje-tm-film-ajanlas",
    },
    {
        "key": "karrier",
        "name": "Karrier- √©s tov√°bbtanul√°si tan√°csad√°s",
        "emoji": "üöÄ",
        "model": "gemini-2.0-flash",
        "system": "P√°lyaorient√°ci√≥, √∂szt√∂nd√≠jak, motiv√°ci√≥s lev√©l, √∂n√©letrajz tippek.",
        "deep_link": "https://chatgpt.com/g/g-6885e34668048191b28c861ed7273397-nje-tm-karrier-es-tovabbtanulasi-tanacsadas",
    },
    {
        "key": "vallalati-latogatas",
        "name": "V√°llalati l√°togat√°s",
        "emoji": "üè¢",
        "model": "gemini-2.0-flash",
        "system": "C√©gl√°togat√°sok szervez√©se: c√©lok, kapcsolatfelv√©tel, √ºtemez√©s, biztons√°gi szab√°lyok.",
        "deep_link": "https://chatgpt.com/g/g-6891c99e7ad081918102a6fd99def8c5-nje-tm-vallalati-latogatas",
    },
    {
        "key": "pedasszisztens",
        "name": "Pedag√≥giai asszisztens",
        "emoji": "üßë‚Äçüè´",
        "model": "gemini-2.0-flash",
        "system": "√ìraforgat√≥k√∂nyv, differenci√°l√°s, √©rt√©kel√©si rubrik√°k, fegyelmez√©si strat√©gi√°k.",
        "deep_link": "https://chatgpt.com/g/g-6891f5b1b2e08191865f1202d89a8336-pedagogia-asszisztens",
    },
    {
        "key": "email-seged",
        "name": "Mentori Email Seg√©d",
        "emoji": "üìß",
        "model": "gemini-2.0-flash",
        "system": "R√∂vid, hivatalos, hib√°tlan magyar levelek sablonosan (t√°rgy, k√∂sz√∂n√©s, z√°r√°s).",
        "deep_link": "https://chatgpt.com/g/g-68a9f80cdef0819185fdb7cc0299d28d-nje-tm-mentori-email-seged",
    },
    {
        "key": "kecskemeny-helyek",
        "name": "Kir√°ly helyek Kecskem√©ten",
        "emoji": "üé°",
        "model": "gemini-2.0-flash",
        "system": "Kecskem√©ti helyek √©s programok di√°koknak; √°r/nyitvatart√°s inf√≥ k√©r√©se a felhaszn√°l√≥t√≥l.",
        "deep_link": "https://chatgpt.com/g/g-68aafdc328888191ba3d4ded8ec96d07-nje-tm-kiraly-helyek-kecskemeten",
    },
]

ROUTER = {
    "tanulas-korrepetalas": ["matek", "nyelvtan", "t√∂ri", "h√°zi", "korrepet"],
    "jatek-programotletek": ["program", "√∂tlet", "k√©zm≈±ves", "szakk√∂r", "k√∂z√∂ss√©g"],
    "sport": ["sport", "foci", "kos√°r", "bemeleg√≠t√©s", "sportnap"],
    "kirandulas": ["kir√°ndul√°s", "busz", "√∫tvonal", "k√∂lts√©g", "sz√ºl≈ëi"],
    "tarsasjatek": ["t√°rsas", "szab√°ly", "j√°t√©k le√≠r√°s"],
    "film-ajanlo": ["film", "mozi", "oszt√°lyfilm"],
    "karrier": ["p√°lyaorient", "tov√°bbtanul", "√∂szt√∂nd√≠j", "√∂n√©letrajz"],
    "vallalati-latogatas": ["√ºzeml√°togat√°s", "gy√°r", "partnerc√©g"],
    "pedasszisztens": ["√≥raforgat√≥k√∂nyv", "differenci√°l", "fegyelmez", "rubrika"],
    "email-seged": ["email", "lev√©l", "megkeres√©s", "szponzor"],
    "kecskemeny-helyek": ["kecskem√©t", "program", "helysz√≠n", "√©tterem", "m√∫zeum"],
}

PROFILES: Dict[str, Dict] = {p["key"]: p for p in DEFAULT_PROFILES}

# =============================
# 2) Seg√©df√ºggv√©nyek: GCS olvas√°s + router
# =============================

def read_pdf_from_gcs(bucket_name: str, file_path: str) -> str | None:
    if not storage_client:
        return None
    try:
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(file_path)
        pdf_bytes = blob.download_as_bytes()
        pdf_reader = PyPDF2.PdfReader(io.BytesIO(pdf_bytes))
        texts = []
        for page in pdf_reader.pages:
            try:
                texts.append(page.extract_text() or "")
            except Exception:
                pass
        return "\n".join(texts).strip()
    except Exception as e:
        st.error(f"PDF beolvas√°si hiba ({bucket_name}/{file_path}): {e}")
        return None


def read_excel_from_gcs(bucket_name: str, file_path: str) -> pd.DataFrame | None:
    if not storage_client:
        return None
    try:
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(file_path)
        xls_bytes = blob.download_as_bytes()
        df = pd.read_excel(io.BytesIO(xls_bytes))
        return df
    except Exception as e:
        st.error(f"Excel beolvas√°si hiba ({bucket_name}/{file_path}): {e}")
        return None


def route_intent(text: str) -> str:
    t = (text or "").lower()
    for key, kws in ROUTER.items():
        if any(kw in t for kw in kws):
            return key
    return ""

# =============================
# 3) Model setup (Gemini)
# =============================
SYSTEM_PROMPT = textwrap.dedent(
    """
    SZEREPED:
    Egy seg√≠t≈ë, empatikus, l√©p√©sr≈ël l√©p√©sre magyar√°z√≥ mentori AI, amely egyetemi hallgat√≥kat t√°mogat abban,
    hogy 5‚Äì8. oszt√°lyos di√°kokat √©rthet≈ëen √©s √©lm√©nyszer≈±en tan√≠tsanak k√ºl√∂nb√∂z≈ë tant√°rgyakban, valamint
    kultur√°lis, sport- √©s k√∂z√∂ss√©gi programokon kereszt√ºl fejlessz√©k a gyerekeket.

    NEVED: Tan√≠tsunk Boti

    SZAB√ÅLYOK:
    - V√°laszaid legyenek r√∂videk, √°ttekinthet≈ëk, l√©p√©senk√©ntiek.
    - Ha el√©rhet≈ë kontextus (PDF/Excel), t√°maszkodj r√°, √©s jel√∂ld: "Forr√°s: GCS f√°jl".
    - A "444" √ºzenetre sz√≥ szerint add vissza a VISSZAJELZES_BLOKK tartalm√°t.
    - Ha a felhaszn√°l√≥ t√©m√°t √≠r le (pl. "matek h√°zi"), el≈ësz√∂r aj√°nld ki a megfelel≈ë Custom GPT linket is.
    """
)

VISSZAJELZES_BLOKK = (
    "K√∂szi, ha id≈ët sz√°nsz arra, hogy megoszd velem a gondolataid!üôè\n"
    "Ha b√°rmilyen √∂tleted, probl√©m√°d vagy javaslatod van a Botival kapcsolatban, itt tudsz jelezni:\n\n"
    "üë®‚Äçüíª **K√©sz√≠tette:** Moln√°r √Åron\n"
    "üéì [LinkedIn profil](https://www.linkedin.com/in/√°ron-moln√°r-867251311/)\n"
    "üìò [Facebook-oldalam](https://www.facebook.com/aron.molnar.716#)\n"
    "üíå [√çrj e-mailt](mailto:tanitsunk.boti@gmail.com?subject=Tan%C3%ADtsunk%20Boti%20-%20Visszajelz%C3%A9s&body=Szia%20%C3%81ron!%0D%0A%0D%0ATelep%C3%BCl%C3%A9s%20/%20Oszt%C3%A1ly:%0D%0A[pl.%20P%C3%A1hi%206.a]%0D%0A%0D%0ABoti:%0D%0A[pl.%20NJE-TM%20%F0%9F%8E%A8%20Kreat%C3%ADv%20foglalkoz√°sok]%0D%0A%0D%0A%E2%9C%85%20Ami%20tetszett:%0D%0A[Pl.%20vicces%20volt,%20j√≥l%20v√°laszolt,%20seg√≠tett%20egy%20konkr√©t%20feladatban‚Ä¶]%0D%0A%0D%0A%E2%9A%A0%EF%B8%8F%20Ami%20kev√©sb√©%20j√∂tt%20be%20vagy%20lehetne%20jobb:%0D%0A[Pl.%20t√∫l%20hossz√∫%20volt%20a v√°lasz,%20nem%20tal√°lta%20el%20a%20l√©nyeget‚Ä¶]%0D%0A%0D%0A%F0%9F%92%A1%20√ñtletem%20/%20javaslatom:%0D%0A[Pl.%20legyen%20benne%20√∫j%20t√©ma,%20b≈ëv√ºlj√∂n%20j√°t√©klist√°val,%20stb.]%0D%0A%0D%0ARem√©lem,%20hasznos%20lesz!%20%0D%0A%0D%0APuszi,%0D%0A[N√©v%20vagy%20becen√©v]) ‚Äì **√çrj b√°tran!**"
)

model_name = "gemini-2.0-flash"
model = genai.GenerativeModel(
    model_name=model_name,
    system_instruction=SYSTEM_PROMPT,
)

# =============================
# 4) UI: oldal, oldals√°v
# =============================
st.set_page_config(page_title="Tan√≠tsunk Boti ‚Äì Router & Chat", page_icon="ü§ñ", layout="wide")

st.title("ü§ñ Tan√≠tsunk Boti ‚Äì Router & Chat (Gemini + Custom GPT)")

with st.sidebar:
    st.subheader("üîê √Ållapot")
    st.success("‚úÖ Google API kulcs rendben")
    if gcs_ok:
        st.success("‚úÖ GCS kapcsolat akt√≠v")
    else:
        st.caption("‚ÑπÔ∏è GCS nincs be√°ll√≠tva ‚Äì a chat en√©lk√ºl is m≈±k√∂dik.")

    st.markdown("---")
    st.subheader("‚òÅÔ∏è GCS kontextus (opcion√°lis)")
    use_gcs = st.checkbox("Kontextus a GCS‚Äëb≈ël", value=False)
    bucket = pdf_path = xls_path = None
    max_chars = 6000
    if use_gcs:
        bucket = st.text_input("Bucket neve", placeholder="pl. my-bucket")
        pdf_path = st.text_input("PDF el√©r√©si √∫t", placeholder="pl. docs/anyag.pdf")
        xls_path = st.text_input("Excel el√©r√©si √∫t", placeholder="pl. data/tudas.xlsx")
        max_chars = st.slider("Max. kontextus (karakter)", 1000, 40000, 8000, step=1000)

    st.markdown("---")
    st.subheader("‚öôÔ∏è Aj√°nl√°si m√≥d")
    mode = st.radio(
        "Mit tegy√ºnk, ha be√≠rsz egy t√©m√°t?",
        ["Csak linket aj√°nlok", "Gemini v√°lasz + link"],
        index=1,
    )

# =============================
# 5) Kontextus beolvas√°sa (ha k√©rted)
# =============================
context_chunks: List[str] = []
if use_gcs and bucket:
    if pdf_path:
        txt = read_pdf_from_gcs(bucket, pdf_path)
        if txt:
            context_chunks.append(txt[:max_chars])
    if xls_path:
        df = read_excel_from_gcs(bucket, xls_path)
        if df is not None and not df.empty:
            context_chunks.append(df.head(30).to_csv(index=False)[:max_chars])

context_combined = "\n---\n".join(context_chunks) if context_chunks else None

# =============================
# 6) K√©t oszlop: bal (v√°laszt√≥), jobb (chat)
# =============================
col_left, col_right = st.columns([1.25, 1])

with col_left:
    st.subheader("V√°lassz t√©m√°t vagy √≠rd be, miben seg√≠thet√ºnk")

    query = st.text_input("Gyors keres≈ë (pl. 'matek h√°zi', 'kir√°ndul√°s busz')")
    if query:
        if query.strip() == "444":
            st.info("Speci√°lis parancs √©szlelve: '444' ‚Äî k√ºldd el a chat mez≈ëben a jobb oldalon.")
        else:
            key = route_intent(query)
            if key:
                prof = PROFILES[key]
                st.success(f"Javasolt: {prof['emoji']} {prof['name']}")
                c1, c2 = st.columns(2)
                with c1:
                    st.link_button("Megnyit√°s Custom GPT‚Äëben", prof["deep_link"])
                with c2:
                    if st.button("Haszn√°lom itt (Gemini)"):
                        st.session_state["current_profile"] = key
                        st.experimental_rerun()
            else:
                st.warning("Nem tal√°ltam egy√©rtelm≈± egyez√©st. V√°lassz k√°rty√°t alul!")

    st.markdown("---")
    st.caption("Kattints egy k√°rty√°ra: vagy megnyitjuk a Custom GPT‚Äët, vagy itt folytatod Geminivel.")

    # k√°rtyar√°cs
    cards_per_row = 2
    keys = list(PROFILES.keys())
    for i in range(0, len(keys), cards_per_row):
        row = st.columns(cards_per_row)
        for col, k in zip(row, keys[i:i+cards_per_row]):
            p = PROFILES[k]
            with col:
                st.markdown(f"### {p['emoji']} {p['name']}")
                st.caption(p["system"]) 
                c1, c2 = st.columns(2)
                with c1:
                    st.link_button("Custom GPT", p["deep_link"])  # √∫j f√ºl√∂n ny√≠lik
                with c2:
                    if st.button("Geminivel itt", key=f"use-{k}"):
                        st.session_state["current_profile"] = k
                        st.experimental_rerun()
                st.markdown("---")

with col_right:
    # Chat n√©zet (Gemini)
    if "current_profile" not in st.session_state:
        st.session_state["current_profile"] = list(PROFILES.keys())[0]

    active_key = st.session_state["current_profile"]
    P = PROFILES[active_key]

    st.subheader(f"Akt√≠v: {P['emoji']} {P['name']} ‚Äî Gemini chat")
    st.caption(f"Model: {P['model']}")

    # Chat √°llapot
    if "chat_sessions" not in st.session_state:
        st.session_state["chat_sessions"] = {}
    if active_key not in st.session_state["chat_sessions"]:
        st.session_state["chat_sessions"][active_key] = genai.GenerativeModel(
            model_name=P["model"], system_instruction=SYSTEM_PROMPT + "\n\nPROFIL: " + P["name"],
        ).start_chat(history=[])

    if "histories" not in st.session_state:
        st.session_state["histories"] = {k: [] for k in PROFILES.keys()}  # (role, text)

    # el≈ëzm√©ny kirajzol√°sa
    for role, content in st.session_state["histories"][active_key]:
        with st.chat_message("assistant" if role == "model" else role):
            st.markdown(content)

    user_msg = st.chat_input("√çrj √ºzenetet‚Ä¶ ('444' = visszajelz√©s)")

    if user_msg is not None:
        if user_msg.strip() == "444":
            st.session_state["histories"][active_key].append(("user", user_msg))
            with st.chat_message("user"):
                st.markdown(user_msg)
            st.session_state["histories"][active_key].append(("model", VISSZAJELZES_BLOKK))
            with st.chat_message("assistant"):
                st.markdown(VISSZAJELZES_BLOKK)
        else:
            st.session_state["histories"][active_key].append(("user", user_msg))
            with st.chat_message("user"):
                st.markdown(user_msg)

            # Prompt √∂ssze√°ll√≠t√°sa (kontextussal + aj√°nlott linkkel, ha kell)
            link_hint = ""
            if mode == "Gemini v√°lasz + link":
                k = route_intent(user_msg)
                if k:
                    link_hint = f"\n\nAj√°nlott Custom GPT: {PROFILES[k]['name']} ‚Üí {PROFILES[k]['deep_link']}"
            if context_combined:
                prompt = (
                    "Haszn√°ld az al√°bbi kontextust a v√°laszhoz. Ha ellentmond√°s van, a kontextus az els≈ëdleges.\n"
                    "Forr√°s: GCS f√°jl\n\n"
                    f"FELHASZN√ÅL√ì K√âRD√âSE:\n{user_msg}{link_hint}\n\n"
                    f"KONTEXTUS:\n{context_combined}"
                )
            else:
                prompt = user_msg + link_hint

            try:
                stream = st.session_state["chat_sessions"][active_key].send_message(prompt, stream=True)
                chunks = []
                with st.chat_message("assistant"):
                    placeholder = st.empty()
                    acc = ""
                    for ch in stream:
                        if ch.text:
                            chunks.append(ch.text)
                            acc += ch.text
                            placeholder.markdown(acc)
                full = "".join(chunks).strip()
            except Exception as e:
                full = f"Hiba a Gemini v√°laszn√°l: {e}"

            st.session_state["histories"][active_key].append(("model", full))

    st.markdown("\n")
    st.link_button("Megnyit√°s Custom GPT‚Äëben (tiszta lap)", P["deep_link"])  # convenience gomb

# -----------------------------
# V√©ge
