import streamlit as st
import google.generativeai as genai
import json
from google.oauth2 import service_account
from google.cloud import storage
import pandas as pd
import PyPDF2
import io

# --- 0. L√âP√âS: API kulcsok be√°ll√≠t√°sa ---
try:
    genai.configure(api_key=st.secrets['GOOGLE_API_KEY'])
except Exception as e:
    st.error("‚ùå Hiba a Gemini API kulcsn√°l. Ellen≈ërizd a Streamlit Secrets-ben a 'GOOGLE_API_KEY'-t.")
    st.stop()

# --- GCS hiteles√≠t√©s ---
try:
    gcp_service_account_info = json.loads(st.secrets['gcp_service_account_json'])
    credentials = service_account.Credentials.from_service_account_info(gcp_service_account_info)
    storage_client = storage.Client(credentials=credentials)
    st.success("‚úÖ GCS kapcsolat akt√≠v")
except Exception as e:
    st.error(f"Hiba a GCS hiteles√≠t√©sn√©l: {e}")
    st.stop()

model = genai.GenerativeModel('gemini-2.0-flash')

# --- Bot v√°laszgener√°l√°s ---
def ajanlo_bot_valasz(felhasznalo_kerdese):
    felhasznalo_kerdese_kisbetus = felhasznalo_kerdese.lower()
    if "jelentkez√©s" in felhasznalo_kerdese_kisbetus:
        return "Jelentkez√©shez keresd fel a hivatalos weboldalt..."
    elif "felt√©tel" in felhasznalo_kerdese_kisbetus:
        return "A r√©szv√©tel alapfelt√©tele a fels≈ëfok√∫ v√©gzetts√©g..."
    try:
        response = model.generate_content(f"""Te egy mentori chatbot vagy. Felhaszn√°l√≥ k√©rd√©se: {felhasznalo_kerdese}""")
        return response.text
    except Exception as e:
        return f"Hiba a Gemini v√°laszn√°l: {e}"

# --- PDF √©s Excel beolvas√°s GCS-b≈ël ---
def read_pdf_from_gcs(bucket_name, file_name):
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(file_name)
    try:
        pdf_bytes = blob.download_as_bytes()
        pdf_reader = PyPDF2.PdfReader(io.BytesIO(pdf_bytes))
        return "".join([page.extract_text() for page in pdf_reader.pages])
    except Exception as e:
        st.error(f"PDF beolvas√°si hiba: {e}")
        return None

def read_excel_from_gcs(bucket_name, file_name):
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(file_name)
    try:
        excel_bytes = blob.download_as_bytes()
        df = pd.read_excel(io.BytesIO(excel_bytes))
        return df
    except Exception as e:
        st.error(f"Excel beolvas√°si hiba: {e}")
        return None

# --- T√°rsasj√°t√©k-aj√°nl√≥ logika ---
def ajanlj_tarsasjatekot(jatekos_szam, ido_preferencia, iskola, df):
    eredmenyek = []
    df_filtered = df[df["J√°t√©kosok sz√°ma"].apply(lambda x: jatekos_szam in eval(x))]
    df_filtered = df_filtered[df_filtered["30 perc"] == ido_preferencia.lower()]
    df_filtered = df_filtered[df_filtered[iskola] == "van"]

    for _, sor in df_filtered.iterrows():
        szoveg = f"""üéâ Kiv√°l√≥ v√°laszt√°s! √çme a r√©szletek a(z) **{sor['N√©v']}** j√°t√©kr√≥l:

üé• Vide√≥: {sor['Vide√≥']}
üìù Le√≠r√°s: {sor['Le√≠r√°s']}
üìò Szab√°lyzat: {sor['Szab√°lyzat']}
üåê [T√°rsasjatekok.com oldal]({sor['tarsasjatekok.com']})

üî¢ J√°t√©kosok: {sor['J√°t√©kosok sz√°ma']}
‚è±Ô∏è Id≈ëtartam: {sor['Id≈ëtartam (perc)']}
üë∂ Aj√°nlott kor: {sor['Korcsoport']}
üé≤ St√≠lus: {sor['Jellemz≈ëk']}"""
        eredmenyek.append(szoveg)

    if not eredmenyek:
        return "Sajn√°lom, nincs a felt√©teleknek megfelel≈ë j√°t√©k a f√°jlban."
    return "\n\n".join(eredmenyek)

# --- Streamlit fel√ºlet ---
st.set_page_config(layout="centered", page_title="Tan√≠tsunk Boti")
st.title("Tan√≠tsunk Boti")

# --- 1. Gemini Chatbot ---
if 'conversation_history' not in st.session_state:
    st.session_state.conversation_history = ["**Tan√≠tsunk Boti:** Szia! Miben seg√≠thetek a 'Tan√≠tsunk Magyarorsz√°g√©rt' programmal kapcsolatban?"]

for message in st.session_state.conversation_history:
    st.markdown(message)

user_input = st.chat_input("√çrd be a k√©rd√©sedet vagy k√©r√©sedet...")

if user_input:
    st.session_state.conversation_history.append(f"**Te:** {user_input}")
    with st.spinner("Boti gondolkodik..."):
        valasz = ajanlo_bot_valasz(user_input)
        st.session_state.conversation_history.append(f"**Tan√≠tsunk Boti:** {valasz}")
    st.rerun()

# --- 2. Dokumentumbeolvas√°s teszt ---
st.write("---")
st.subheader("üìÑ Dokumentum tesztel√©s")

bucket_name = "tanitsunk-boti-dokumentumok-2025"
pdf_file = "teszt.pdf"
excel_file = "adatok.xlsx"
tarsas_file = "tarsasjatekok.xlsx"

if st.button("PDF megnyit√°sa"):
    pdf_text = read_pdf_from_gcs(bucket_name, pdf_file)
    st.text_area("üìÑ PDF tartalom:", pdf_text or "Nem siker√ºlt beolvasni.")

if st.button("Excel megnyit√°sa"):
    df = read_excel_from_gcs(bucket_name, excel_file)
    if df is not None:
        st.dataframe(df)
    else:
        st.warning("Nem siker√ºlt beolvasni az Excelt.")

# --- 3. T√°rsasj√°t√©k-aj√°nl√≥ ---
st.write("---")
st.subheader("‚ôüÔ∏è T√°rsasj√°t√©k-aj√°nl√°s")

jatekosok_szama = st.number_input("H√°nyan fogtok j√°tszani?", min_value=1, max_value=10)
ido_preferencia = st.radio("Milyen hossz√∫ j√°t√©kra v√°gytok?", ["alatt", "felett"])
iskola = st.selectbox("Melyik iskol√°ban j√°tszan√°tok?", ["Orgov√°ny", "Cs√©pa", "P√°hi"])

if st.button("Aj√°nlj j√°t√©kot"):
    tarsas_df = read_excel_from_gcs(bucket_name, tarsas_file)
    if tarsas_df is not None:
        eredmeny = ajanlj_tarsasjatekot(jatekos_szam=int(jatekosok_szama), ido_preferencia=ido_preferencia, iskola=iskola, df=tarsas_df)
        st.markdown(eredmeny)
    else:
        st.error("Nem siker√ºlt bet√∂lteni a tarsasjatekok.xlsx f√°jlt.")